{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Chowda","text":"<p>A CLAMS processing app</p>"},{"location":"#install","title":"Install","text":"<p>Install instructions can be found on the install page</p>"},{"location":"#reference","title":"Reference","text":"<p>Further details can be found in the reference section</p>"},{"location":"#credits","title":"Credits","text":"<p>Created by WGBH-MLA for the CLAMS project</p>"},{"location":"install/","title":"Install","text":""},{"location":"install/#clone-the-repository","title":"Clone the repository::","text":"<pre><code>git clone https://github.com/WGBH-MLA/chowda.git\ncd chowda\n</code></pre>"},{"location":"install/#install-with-pdm-recommended","title":"Install with PDM (Recommended)","text":"<p>PDM is used as the packaging manager. It can be installed with <code>pip install pdm</code>.</p> <p>Install the project with development dependencies:</p> <pre><code>pdm install\n</code></pre> <p>Activate your virtual environment</p> <pre><code>$(pdm venv activate)\n</code></pre> <p>Note: <code>pdm venv activate</code> outputs the command needed to activate your virtual environment. The <code>$()</code> wrapper evaluates it in your current shell context.</p>"},{"location":"install/#install-with-venv","title":"Install with venv","text":"<p>If PDM is not available, it can also be installed with pip. It is recommeneded to install to a virtual environment using <code>venv</code>:</p> <pre><code>python3 -m venv .venv\nsource .venv/bin/activate\n</code></pre> <p>Install the package</p> <pre><code>pip install .\n</code></pre>"},{"location":"install/#run-the-application","title":"Run the application","text":"<pre><code>uvicorn chowda:app --reload\n</code></pre> <p>Visit: localhost:8000</p>"},{"location":"install/#seed-the-database","title":"Seed the database","text":"<p>To seed the database with fake data, run the <code>seeds.py</code> script:</p> <pre><code>python tests/seeds.py\n</code></pre> <p>Optional: Customize the number of records created by changing the <code>num_*</code> variables in the <code>seed</code> function.</p>"},{"location":"install/#deactivate-the-virtual-environment","title":"Deactivate the virtual environment","text":"<p>Run the <code>deactivate</code> command to return to your normal shell environment.</p> <pre><code>deactivate\n</code></pre>"},{"location":"examples/session/","title":"SQLModel Session exercise","text":"In\u00a0[1]: Copied! <pre>from factories import *\n</pre> from factories import * In\u00a0[2]: Copied! <pre>batch = BatchFactory.create()\n</pre> batch = BatchFactory.create() <pre>2023-04-05 13:11:53,797 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-04-05 13:11:53,800 INFO sqlalchemy.engine.Engine INSERT INTO batches (name, description) VALUES (?, ?)\n2023-04-05 13:11:53,802 INFO sqlalchemy.engine.Engine [generated in 0.00180s] ('Batch 0', 'Batch 0 Description')\n2023-04-05 13:11:53,804 INFO sqlalchemy.engine.Engine COMMIT\n</pre> In\u00a0[3]: Copied! <pre>session = Session.object_session(batch)\n</pre> session = Session.object_session(batch) In\u00a0[4]: Copied! <pre>batch.description = \"exceedingly jolly\"\n</pre> batch.description = \"exceedingly jolly\" In\u00a0[5]: Copied! <pre>print('session.dirty = ', session.dirty)\n# =&gt; session.dirty = IdentitySet([Batch(description='foo')])\n</pre> print('session.dirty = ', session.dirty) # =&gt; session.dirty = IdentitySet([Batch(description='foo')]) <pre>session.dirty =  IdentitySet([Batch(description='exceedingly jolly')])\n</pre> In\u00a0[6]: Copied! <pre>session.commit()\n</pre> session.commit() <pre>2023-04-05 13:11:54,189 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-04-05 13:11:54,193 INFO sqlalchemy.engine.Engine SELECT batches.id AS batches_id, batches.name AS batches_name \nFROM batches \nWHERE batches.id = ?\n2023-04-05 13:11:54,194 INFO sqlalchemy.engine.Engine [generated in 0.00104s] (14,)\n2023-04-05 13:11:54,196 INFO sqlalchemy.engine.Engine UPDATE batches SET description=? WHERE batches.id = ?\n2023-04-05 13:11:54,197 INFO sqlalchemy.engine.Engine [generated in 0.00072s] ('exceedingly jolly', 14)\n2023-04-05 13:11:54,198 INFO sqlalchemy.engine.Engine COMMIT\n</pre> In\u00a0[7]: Copied! <pre>print('session.dirty = ', session.dirty)\n# =&gt; IdentitySet([])\n</pre> print('session.dirty = ', session.dirty) # =&gt; IdentitySet([]) <pre>session.dirty =  IdentitySet([])\n</pre> In\u00a0[8]: Copied! <pre>with Session(engine) as db:\n   batch_copy = db.exec(\n       select(Batch).where(Batch.id==batch.id)\n   ).first()\nprint('batch_copy.description = ', batch_copy.description)\n# =&gt; foo\n</pre> with Session(engine) as db:    batch_copy = db.exec(        select(Batch).where(Batch.id==batch.id)    ).first() print('batch_copy.description = ', batch_copy.description) # =&gt; foo <pre>2023-04-05 13:11:54,422 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-04-05 13:11:54,423 INFO sqlalchemy.engine.Engine SELECT batches.id AS batches_id, batches.name AS batches_name, batches.description AS batches_description \nFROM batches \nWHERE batches.id = ?\n2023-04-05 13:11:54,424 INFO sqlalchemy.engine.Engine [generated in 0.00088s] (14,)\n2023-04-05 13:11:54,426 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-04-05 13:11:54,428 INFO sqlalchemy.engine.Engine SELECT batches.id, batches.name, batches.description \nFROM batches \nWHERE batches.id = ?\n2023-04-05 13:11:54,429 INFO sqlalchemy.engine.Engine [generated in 0.00082s] (14,)\n2023-04-05 13:11:54,430 INFO sqlalchemy.engine.Engine ROLLBACK\nbatch_copy.description =  exceedingly jolly\n</pre> <p>Note that since we grabbed batch_copy using a contextual session, and that context has ended, so has the session, and the object is currently unattached to any session.</p> In\u00a0[9]: Copied! <pre>print('seesion for batch_copy = ', Session.object_session(batch_copy))\n# =&gt; None\n</pre> print('seesion for batch_copy = ', Session.object_session(batch_copy)) # =&gt; None <pre>seesion for batch_copy =  None\n</pre> In\u00a0[10]: Copied! <pre>batch_copy.description += \" and effortlessly charming\"\nwith Session(engine) as db:\n   db.add(batch_copy)\n   db.commit()\n</pre> batch_copy.description += \" and effortlessly charming\" with Session(engine) as db:    db.add(batch_copy)    db.commit() <pre>2023-04-05 13:11:54,703 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-04-05 13:11:54,705 INFO sqlalchemy.engine.Engine UPDATE batches SET description=? WHERE batches.id = ?\n2023-04-05 13:11:54,706 INFO sqlalchemy.engine.Engine [cached since 0.5094s ago] ('exceedingly jolly and effortlessly charming', 14)\n2023-04-05 13:11:54,707 INFO sqlalchemy.engine.Engine COMMIT\n</pre> In\u00a0[11]: Copied! <pre>with Session(engine) as db:\n   db.add(batch_copy)\n   print('batch_copy.description = ', batch_copy.description)\n   # =&gt; batch_copy.description =  exceedingly jolly and effortlessly charming\n</pre> with Session(engine) as db:    db.add(batch_copy)    print('batch_copy.description = ', batch_copy.description)    # =&gt; batch_copy.description =  exceedingly jolly and effortlessly charming <pre>2023-04-05 13:11:54,955 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-04-05 13:11:54,956 INFO sqlalchemy.engine.Engine SELECT batches.id AS batches_id, batches.name AS batches_name, batches.description AS batches_description \nFROM batches \nWHERE batches.id = ?\n2023-04-05 13:11:54,957 INFO sqlalchemy.engine.Engine [cached since 0.534s ago] (14,)\nbatch_copy.description =  exceedingly jolly and effortlessly charming\n2023-04-05 13:11:54,959 INFO sqlalchemy.engine.Engine ROLLBACK\n</pre> In\u00a0[12]: Copied! <pre>print('batch.description before refresh = ', batch.description)\n# =&gt; batch.description before refresh = exceedingly jolly\n</pre> print('batch.description before refresh = ', batch.description) # =&gt; batch.description before refresh = exceedingly jolly  <pre>batch.description before refresh =  exceedingly jolly\n</pre> In\u00a0[13]: Copied! <pre>session.refresh(batch)\nprint('batch.description after refresh = ', batch.description)\n# =&gt; batch.description after refresh = exceedingly jolly and effortlessly charming\n</pre> session.refresh(batch) print('batch.description after refresh = ', batch.description) # =&gt; batch.description after refresh = exceedingly jolly and effortlessly charming  <pre>2023-04-05 13:11:55,366 INFO sqlalchemy.engine.Engine SELECT batches.id, batches.name, batches.description \nFROM batches \nWHERE batches.id = ?\n2023-04-05 13:11:55,368 INFO sqlalchemy.engine.Engine [generated in 0.00136s] (14,)\nbatch.description after refresh =  exceedingly jolly and effortlessly charming\n</pre> In\u00a0[14]: Copied! <pre>batch.description += \" and fantastically flatulent\"\n</pre> batch.description += \" and fantastically flatulent\" In\u00a0[15]: Copied! <pre>session.commit()\n</pre>  session.commit() <pre>2023-04-05 13:11:55,512 INFO sqlalchemy.engine.Engine UPDATE batches SET description=? WHERE batches.id = ?\n2023-04-05 13:11:55,513 INFO sqlalchemy.engine.Engine [cached since 1.317s ago] ('exceedingly jolly and effortlessly charming and fantastically flatulent', 14)\n2023-04-05 13:11:55,515 INFO sqlalchemy.engine.Engine COMMIT\n</pre> In\u00a0[16]: Copied! <pre>with Session(engine) as db:\n   batch_copy.description += \" and elaborately loquacious\"\n   db.add(batch_copy)\n   db.commit()\n   print('batch_copy.description = ', batch_copy.description)\n# =&gt; batch_copy.description =  exceedingly jolly and effortlessly charming and elaborately loquacious\n</pre> with Session(engine) as db:    batch_copy.description += \" and elaborately loquacious\"    db.add(batch_copy)    db.commit()    print('batch_copy.description = ', batch_copy.description) # =&gt; batch_copy.description =  exceedingly jolly and effortlessly charming and elaborately loquacious <pre>2023-04-05 13:11:55,579 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-04-05 13:11:55,580 INFO sqlalchemy.engine.Engine UPDATE batches SET description=? WHERE batches.id = ?\n2023-04-05 13:11:55,581 INFO sqlalchemy.engine.Engine [cached since 1.385s ago] ('exceedingly jolly and effortlessly charming and elaborately loquacious', 14)\n2023-04-05 13:11:55,583 INFO sqlalchemy.engine.Engine COMMIT\n2023-04-05 13:11:55,586 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-04-05 13:11:55,586 INFO sqlalchemy.engine.Engine SELECT batches.id AS batches_id, batches.name AS batches_name, batches.description AS batches_description \nFROM batches \nWHERE batches.id = ?\n2023-04-05 13:11:55,587 INFO sqlalchemy.engine.Engine [cached since 1.164s ago] (14,)\nbatch_copy.description =  exceedingly jolly and effortlessly charming and elaborately loquacious\n2023-04-05 13:11:55,589 INFO sqlalchemy.engine.Engine ROLLBACK\n</pre>"},{"location":"examples/session/#sqlmodel-session-exercise","title":"SQLModel Session exercise\u00b6","text":"<p>Adapted from Drew's slack example</p>"},{"location":"examples/session/#create-a-new-batch-from-factory","title":"Create a new Batch from factory\u00b6","text":""},{"location":"examples/session/#grab-the-session-the-batch-was-created-with-for-inspection","title":"Grab the session the Batch was created with for inspection.\u00b6","text":""},{"location":"examples/session/#change-something-on-the-batch","title":"Change something on the batch\u00b6","text":""},{"location":"examples/session/#view-the-changes-that-have-yet-to-be-committed-to-the-db","title":"View the changes that have yet to be committed to the db\u00b6","text":""},{"location":"examples/session/#commit-the-changes-to-the-db","title":"Commit the changes to the db.\u00b6","text":"<p>Note that we do not have to call session.add(batch) since the Batch instance is already attached to the session.</p>"},{"location":"examples/session/#verify-there-are-no-other-pending-changes","title":"Verify there are no other pending changes.\u00b6","text":""},{"location":"examples/session/#use-a-contextual-session","title":"Use a contextual session\u00b6","text":"<p>(called \"db\") to grab a separate copy of the batch and verify it has the change.</p>"},{"location":"examples/session/#now-change-batch_copydescripiton","title":"Now change batch_copy.descripiton,\u00b6","text":"<p>save it with a contextual session, and see how it affected or original Batch instance, which is still alive and attached to the session it was created with.</p>"},{"location":"examples/session/#note-after-committing-changes-to-batch_copy-using-contextual-session-in-this-way","title":"NOTE: after committing changes to batch_copy using contextual session in this way,\u00b6","text":"<p>trying to access attributes on the object like batch_copy.description raises an error:</p> <p>Instance &lt;Batch at 0x107b84e10&gt; is not bound to a Session; attribute refresh operation cannot proceed</p>"},{"location":"examples/session/#confirm-that-our-original-batch-instance-still-has-the-old-description","title":"Confirm that our original Batch instance still has the old description\u00b6","text":""},{"location":"examples/session/#refresh-the-original-batch-instance","title":"Refresh the original Batch instance\u00b6","text":"<p>and check the description again</p>"},{"location":"examples/session/#now-lets-edit-batchdescription-and-batch_copydescription","title":"Now let's edit <code>batch.description</code> and <code>batch_copy.description</code>\u00b6","text":"<p>and update them both independently to see what happens.</p>"},{"location":"examples/session/#save-the-first-edit","title":"save the first edit\u00b6","text":""},{"location":"examples/session/#save-the-second-edit","title":"save the second edit\u00b6","text":""},{"location":"examples/session/#unsurprisingly-the-2nd-save-wins","title":"Unsurprisingly, the 2nd save wins.\u00b6","text":"<p>The changes saved in original Batch instance with it's original session get overwritten by this one.</p>"},{"location":"reference/","title":"Reference","text":"<p>This section describes the implementation of specific code modules.</p>"},{"location":"reference/#modules","title":"Modules","text":"<ul> <li>app - the main web application</li> <li>models - Database models</li> </ul>"},{"location":"reference/app/","title":"App","text":"<p>App</p> <p>Main Chowda application</p>"},{"location":"reference/models/","title":"Models","text":"<p>Models</p> <p>SQLModels for DB and validation</p>"},{"location":"reference/models/#chowda.models.MediaUrl","title":"<code>MediaUrl = stricturl(allowed_schemes=['video', 'audio', 'text'], tld_required=False)</code>  <code>module-attribute</code>","text":"<p>Media url validator. Must have prefix of video, audio, or text. No TLD required.</p> Example <p>video://*</p>"},{"location":"reference/models/#chowda.models.User","title":"<code>User</code>","text":"<p>         Bases: <code>SQLModel</code></p> <p>User model</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Optional[int]</code> <p>Primary key</p> <code>email</code> <code>EmailStr</code> <p>User email</p> <code>first_name</code> <code>str</code> <p>User first name</p> <code>last_name</code> <code>str</code> <p>User last name</p> Source code in <code>chowda/models.py</code> <pre><code>class User(SQLModel, table=True):\n\"\"\"User model\n\n    Attributes:\n        id: Primary key\n        email: User email\n        first_name: User first name\n        last_name: User last name\n    \"\"\"\n\n    __tablename__ = 'users'\n    id: Optional[int] = Field(primary_key=True)\n    email: EmailStr = Field(index=True)\n    first_name: str = Field(min_length=3, index=True)\n    last_name: str = Field(min_length=3, index=True)\n\n    async def __admin_repr__(self, request: Request):\n        return f'{self.first_name} {self.last_name}'\n</code></pre>"}]}